# Development Environment Setup

## Prerequisites

- Node.js 18+ and pnpm
- Docker and Docker Compose
- PostgreSQL (via Docker)

## Quick Start

```bash
# Install dependencies
pnpm install

# Start development environment
docker-compose up -d

# Run database migrations
pnpm db:migrate

# Seed database with sample data
pnpm db:seed

# Start development servers
pnpm dev
```

## Docker Configuration

- **PostgreSQL** - Database service with persistent volume
- **API** - NestJS backend service
- **Web** - Next.js frontend service
- **Network** - Internal Docker network for service communication

## Environment Variables

Required environment variables:

- `DATABASE_URL` - PostgreSQL connection string
- `JWT_SECRET` - Secret key for JWT token signing
- `NEXTAUTH_SECRET` - Next.js authentication secret
- `API_URL` - Backend API URL for frontend

## Database Setup

- Use Docker Compose for PostgreSQL
- Initialize with sample users and incidents
- Proper indexing for performance
- Backup and restore strategies

## Development Workflow

1. Make changes to code
2. Services auto-reload with hot reloading
3. Database changes require migration
4. Test changes in development environment
5. Use proper Git workflow with feature branches

## Build and Deployment

```bash
# Build all applications
pnpm build

# Build Docker images
docker-compose build

# Run production containers
docker-compose -f docker-compose.prod.yml up
```

## Troubleshooting

- Check Docker container logs: `docker-compose logs`
- Restart services: `docker-compose restart`
- Reset database: `pnpm db:reset`
- Clear node_modules: `pnpm clean`
  description:
  globs:
  alwaysApply: false

---
